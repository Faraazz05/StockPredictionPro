# ============================================
# StockPredictionPro - docker-compose.yml
# Multi-service setup for development and demo
# ============================================

version: '3.8'

services:
  # Main Streamlit application
  stockpred-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stockpred-app
    ports:
      - "8501:8501"  # Streamlit UI
      - "8000:8000"  # Optional FastAPI
    environment:
      - ENVIRONMENT=development
      - APP_NAME=StockPredictionPro
      - APP_DEBUG=true
      - LOG_LEVEL=INFO
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_HEADLESS=true
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - USE_REDIS=true  # Enable Redis if available
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env  # Load your local .env file
    volumes:
      # Persist data and logs between runs
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config:ro  # Read-only config
      # For development: live code reload (comment out for production)
      - ./app:/app/app
      - ./src:/app/src
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - stockpred-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: stockpred-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - stockpred-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL database (optional - enable if needed)
  postgres:
    image: postgres:15-alpine
    container_name: stockpred-postgres
    environment:
      POSTGRES_DB: stockpred
      POSTGRES_USER: stockpred
      POSTGRES_PASSWORD: stockpred123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    restart: unless-stopped
    networks:
      - stockpred-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockpred -d stockpred"]
      interval: 30s
      timeout: 5s
      retries: 3
    # Uncomment profiles to disable by default (enable with --profile db)
    profiles:
      - database

  # Nginx reverse proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: stockpred-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./security/ssl:/etc/nginx/ssl:ro
    depends_on:
      - stockpred-app
    restart: unless-stopped
    networks:
      - stockpred-network
    # Uncomment profiles to disable by default (enable with --profile production)
    profiles:
      - production

# Persistent volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

# Custom network
networks:
  stockpred-network:
    driver: bridge
